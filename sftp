// in cypress/support/index.d.ts
// load type definitions that come with Cypress module
/// <reference types="cypress" />
/// <reference types="aws-sdk" />

declare namespace Cypress {
  interface Chainable {
    postToken(): Chainable<Element>;

    // BrokeProfile Database
    putItemInDb<T extends { profileId: string; attributeType: string }>(
      item: T
    ): Chainable<AWS.DynamoDB.DocumentClient.PutItemOutput>;
    deleteItemInDb(key: {
      profileId: string;
      attributeType: string;
    }): Chainable<AWS.DynamoDB.DocumentClient.DeleteItemOutput>;

    // ExternalData Database
    putItemInExternalDb<T extends { dataId: string; externalRef: string }>(
      item: T
    ): Chainable<AWS.DynamoDB.DocumentClient.PutItemOutput>;
    deleteItemInExternalDataDb(key: {
      dataId: string;
      externalRef: string;
    }): Chainable<AWS.DynamoDB.DocumentClient.DeleteItemOutput>;

    // E2E specified
    isNotWithinViewport(subject: string | HTMLElement): void;
    isWithinViewport(subject: string | HTMLElement): void;
    setViewport(size: string | string[] | Number | ViewportPreset): void;

    // from snapshot plugin, which does not have its own type declarations
    snapshot(snapshotName?: string): void;

    viewports(): ViewportPreset[];

    getGmailMails(getMailConf: {
      testId: string;
      fileNamePrefix: string;
      deleteOnSuccess: boolean;
    }): Chainable<
      {
        subject: string;
        to: string;
        from: string;
        date: string;
        uid: number;
        fileName: string;
      }[]
    >;

    storeVariable(key: string, value: any): void;
    loadVariable(key: string): any;

    clickConsentLayer(): void;

    getAttached<E extends Node = HTMLElement>(selector: string | (() => (E | JQuery<E>))): Chainable<JQuery<E>>;
    getAttachedChildren<E extends Node = HTMLElement>(selector: string | (() => (E | JQuery<E>))): Chainable<JQuery<E>>;
    getByCyAttribute(value: string): any;
    visitItDe(path: string, closeConsentLayer?: boolean): any;
    visitItDeBxCookieTest(path: string, closeConsentLayer?: boolean): any;
    visitItDeExpose(path: string, closeConsentLayer?: boolean): any;
    visitItAt(path: string, closeConsentLayer?: boolean): any;
    visitItCh(path: string, closeConsentLayer?: boolean): any;
    visitIt(path: string, closeConsentLayer?: boolean): any;
    login(email: string, password: string): any;
    retrieveSecretJson<T>(secretsId: string): Chainable<T>;
  }
}

import 'cypress-localstorage-commands';

//

Cypress.Commands.add('login', (email, password) => {
  cy.get('#user-name-input', { timeout: 5000 }).type(email);
  cy.get('#password-input', { timeout: 5000 }).type(password);
  cy.get('#signin-button', { timeout: 5000 }).click();
});

// remove without accepting
Cypress.Commands.add('clickConsentLayer', () => {
  cy.wait(1000);
  cy.get('body').then(($body) => {
    if ($body.find('#usercentrics-root').length > 0) {
      cy.get('#usercentrics-root').invoke('remove');
      cy.get('body').invoke('css', 'height', 'unset');
      cy.get('body').invoke('css', 'overflow', 'unset');
    }
  });
});

Cypress.Commands.add('getByCyAttribute', (attributeValue) => {
  return cy.get(`[data-cy="${attributeValue}"]`);
});

Cypress.Commands.add('visitIltAt', (path, closeConsentLayer = false) => {
  const itAtBaseUrl = Cypress.env('itAtBaseUrl');

  cy.visit(`${tAtBaseUrl}${path}?mediaid=114`);
  if (closeConsentLayer) {
    cy.clickConsentLayer();
  }
});

Cypress.Commands.add('postToken', () => {
  cy.request({
    method: 'POST',
    url: Cypress.env('authUrl'),
    form: true,
    body: {
      grant_type: 'password',
      username: Cypress.env('username'),
      password: Cypress.env('password')
    },
    auth: {
      username: Cypress.env('basicUsername'),
      password: Cypress.env('basicPassword')
    }
  })
    .its('body')
    .then((identity) => {
      cy.setLocalStorage('access_token', identity.access_token);
    });
});

Cypress.Commands.add('putItemInDb', (item: { profileId: string; attributeType: string }) => {
  return cy.task('putItemInDbTask', item);
});

Cypress.Commands.add('deleteItemInDb', (key: { profileId: string; attributeType: string }) => {
  return cy.task('deleteItemInDbTask', key);
});

Cypress.Commands.add('putItemInExternalDb', (item: { dataId: string; externalRef: string }) => {
  return cy.task('putItemInExternalDbTask', item);
});

Cypress.Commands.add('deleteItemInExternalDataDb', (key: { dataId: string; externalRef: string }) => {
  return cy.task('deleteItemInExternalDataDbTask', key);
});

Cypress.Commands.add(
  'setViewport',
  (viewportConfig: [Cypress.ViewportPreset, Cypress.ViewportOrientation] | Cypress.ViewportPreset) => {
    if (Array.isArray(viewportConfig)) {
      const [viewport, orientation] = viewportConfig;
      cy.viewport(viewport, orientation);
    } else {
      cy.viewport(viewportConfig);
    }
  }
);

Cypress.Commands.add('isNotWithinViewport', (selector) => {
  cy.get(selector).then(($el) => {
    cy.window().then((win) => {
      const winHeight = Cypress.$(win).height();
      const rect = $el[0].getBoundingClientRect();

      cy.log(`top: ${rect.top}, bottom: ${rect.bottom}`);

      const isAboveViewport = rect.top < 0 && rect.bottom < 0;
      const isBelowViewport = rect.top > winHeight && rect.bottom > winHeight;
      const errorMsg = `element '${selector}' is not completely above or below viewport: it starts at ${rect.top}px and stretches to ${rect.bottom}px compared to the ${winHeight}px viewport height`;
      expect(isAboveViewport || isBelowViewport).to.be.equal(true, errorMsg);
    });
  });
});

Cypress.Commands.add('isWithinViewport', (selector) => {
  cy.get(selector).then(($el) => {
    cy.window().then((win) => {
      const winHeight = Cypress.$(win).height();
      const rect = $el[0].getBoundingClientRect();

      cy.log(`top: ${rect.top}, bottom: ${rect.bottom}`);

      expect(rect.top).not.to.be.lessThan(
        0,
        `as value is negative, element '${selector}' is not in the current window viewport`
      );
      expect(rect.top).not.to.be.greaterThan(
        winHeight,
        `window viewport height is ${winHeight}px, but element '${selector}' starts at ${rect.top}px`
      );
      expect(rect.bottom).not.to.be.greaterThan(
        winHeight,
        `window viewport height is ${winHeight}px, but element '${selector}' ends at ${rect.bottom}px`
      );
    });
  });
});

Cypress.Commands.add('getGmailMails', (getMailConf: { testId: string; fileNamePrefix: string }) => {
  return cy.task('getGmailMailsTask', getMailConf);
});

Cypress.Commands.add('storeVariable', (key: string, value: any) => {
  return cy.task('setStoreVariable', { key, value });
});
Cypress.Commands.add('loadVariable', (key: string) => {
  return cy.task('getStoreVariable', key);
});

Cypress.Commands.add('getAttached', (selector) => {
  const getElement = typeof selector === 'function' ? selector : ($d) => $d.find(selector);
  let $el = null;
  return cy
    .document()
    .should(($d) => {
      $el = getElement(Cypress.$($d));
      expect(Cypress.dom.isDetached($el)).to.be.false;
    })
    .then(() => cy.wrap($el));
});

Cypress.Commands.add('getAttachedChildren', (selector) => {
  const getElement = typeof selector === 'function' ? selector : ($d) => $d.find(`${selector} *`);
  let $els = null;
  return cy
    .document()
    .should(($d) => {
      $els = getElement(Cypress.$($d));
      console.log(Cypress.dom.isDetached($els), $els);

      const detachedEls = $els.filter((_idx, el) => Cypress.dom.isDetached(el));

      console.log('after filter', detachedEls.length, 'are detached');

      expect(detachedEls.length > 0).to.be.false;
    })
    .then(() => cy.wrap($els));
});

Cypress.Commands.add('retrieveSecretJson', (secretsId: string) => {
  return cy.task('retrieveSecretJson', secretsId);
});



