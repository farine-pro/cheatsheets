https://stackoverflow.com/questions/55402751/angular-app-has-to-clear-cache-after-new-deployment
https://stackoverflow.com/questions/54706298/angular-i18n-json-cache-issues-using-nginx

https://www.lambdatest.com/blog/cypress-accessibility-testing/
https://brandonroberts.dev/blog/posts/2020-07-06-lazy-loading-routes-observable/
https://stackoverflow.com/questions/54133888/cypress-custom-commands-not-recognized
https://blog.abatishchev.dev/2015/07/22/how-to-extract-private-key-from-pfx-and-remove-passphrase-using-openssl/

https://update.angular.io/?l=2&v=13.0-14.0
https://levelup.gitconnected.com/test-angular-pipes-with-services-4cf77e34e576

--------------------------------------------------------------------------------------------------------------------------------------
const tabsSet = new Set(['info', 'features', 'special', 'stars'])
const isOfTypeTabs = (keyInput: string): boolean => tabsSet.has(keyInput)

console.log(isOfTypeTabs('info')) // true
console.log(isOfTypeTabs('foo')) /

const TabValues = ['info', 'features', 'special', 'stars'] as const;
const TabValuesObj = TabValues.reduce(
  (acc, next) => ({ ...acc, [next]: null }),
  {} as Record<string, null>,
);
export type TabType = typeof TabValues[number];
export function isTabType(value: string): value is TabType {
  return value in TabValuesObj;
}


const keys = <const> ['features','special'];
export type Key = typeof keys[number];
const tabTypes = <const> ['info' ,'features' ,'special', 'stars'];
export type TabTypes = typeof tabTypes[number];

activeTabChanged(event: TabTypes) {
    this.activeTab: TabTypes = event;
    // it won't let me set the key here because key has a different type 
    // but the send event can be contained in type Key
    // how can I check if the send event from type TabTypes is contained in type Key

    if (event in keys) {
        this.key: Key = event as Key;
    }
}


location /landingpage {
        #root /usr/share/nginx/www/gallery/assets/html;
		#autoindex on;
		alias /usr/share/nginx/www/gallery/assets/html/;
		index landingpage.html;
		location ~* \.(js|css|png|jpg|jpeg)$ {
            expires 7d; 
        }
        try_files $uri $uri/ /landingpage.html =404;
    }

	


formControlName=(.*?)\s

	import {
  Project,
  VariableDeclarationKind,
  InterfaceDeclaration,
} from "ts-morph";

// initName is name of the interface file below the root, ./src is considered the root
const Keys = (intName: string): string[] => {
  const project = new Project();
  const sourceFile = project.addSourceFileAtPath(`./src/${intName}.ts`);
  const node = sourceFile.getInterface(intName)!;
  const allKeys = node.getProperties().map((p) => p.getName());

  return allKeys;
};

export default Keys;

usage
import keys from "./keys";

const myKeys = keys("MyInterface") //ts file name without extension

console.log(myKeys)
	
	
	@Bean
	public OpenApiCustomiser openApiCustomiser() {
		return openAPI -> openAPI.getComponents().getSchemas().values()
				.forEach(schema -> {

					if (schema.getProperties() != null) {
						((Map<String, Schema>) schema.getProperties()).forEach((String name, Schema value) -> {
							Class<?> ClassWithAnnotations = null;
							Field classMemberField = null;
							try {
								ClassWithAnnotations = Class.forName("com.example.demo.model." + schema.getName());
								classMemberField = ClassWithAnnotations.getDeclaredField(name);
								boolean annotationPresent = classMemberField.isAnnotationPresent(ApiResponseFieldAnno.class);
								if (annotationPresent) {
									value.setAdditionalProperties(new ObjectSchema().addProperties("techProp", new BooleanSchema()));
								}
							} catch (Exception e) {
							}
						});
					}


//					schema.setAdditionalProperties(new ObjectSchema().addProperties("techProp", new BooleanSchema())
//					);
				});
	}

ng g scuri:spec --name src/app/components/c1/c1.component.ts --update
https://github.com/gparlakov/scuri
https://indepth.dev/posts/1240/create-your-angular-unit-test-spies-automagically
https://blog.3sharecorp.com/unit-testing-js-and-ts-in-aem-with-jest

https://stackoverflow.com/questions/39038791/inheritance-and-dependency-injection

https://stackoverflow.com/questions/60151224/unable-to-change-the-configuration-from-jest-to-karma-ngentest
https://www.amadousall.com/how-to-set-up-angular-unit-testing-with-jest/
https://stackoverflow.com/questions/61422160/testing-angular-component-using-jest
https://stackoverflow.com/questions/62558674/angular-jest-testing-a-component-that-opens-a-matdialog-open-is-not-a-function

https://medium.com/@kandisa.ganesh/resiliency-patterns-with-spring-boot-and-resilience4j-a28734bda17f
https://stackoverflow.com/questions/65909665/circuitbreaker-not-loading-defaults-from-yaml-file
https://quabr.com/65536176/get-instance-of-circuit-breaker-from-configuration-file
https://github.com/thombergs/code-examples/blob/master/resilience4j/circuitbreaker/src/main/java/io/reflectoring/resilience4j/circuitbreaker/Examples.java
https://reflectoring.io/circuitbreaker-with-resilience4j/

https://stackoverflow.com/questions/65331080/spring-data-rest-change-operation-id-in-openapi-specification


https://stackoverflow.com/questions/53748432/spring-generic-repository-autowiring-failure
https://medium.com/codestorm/custom-json-response-with-responseentity-in-spring-boot-b09e87ab1f0a

package com.example.DemoGraphQL.repository;

import org.springframework.data.repository.CrudRepository;
import org.springframework.data.repository.NoRepositoryBean;

@NoRepositoryBean
public interface BaseRepository<T> extends CrudRepository<T, Long> {
}
-----------------------------------------------------------------------------
package com.example.DemoGraphQL.repository;

import com.example.DemoGraphQL.model.Book;

public interface GenericBookRepository extends BaseRepository<Book> {
}
-----------------------------------------------------------------------------
package com.example.DemoGraphQL.controller;

import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;


import java.util.List;

import com.example.DemoGraphQL.repository.BaseRepository;


public abstract class Base<T> {

    abstract BaseRepository<T> getRepository();

    @GetMapping("/{id}")
    @ApiOperation(value = "View the item", response = Iterable.class)
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "Successfully retrieved item"),
            @ApiResponse(code = 401, message = "You are not authorized to view the resource"),
            @ApiResponse(code = 403, message = "Accessing the resource you were trying to reach is forbidden"),
            @ApiResponse(code = 404, message = "The resource you were trying to reach is not found")
    }
    )
    public T findById(Long id) {
        return (T) getRepository().findById(id);
    }

    @GetMapping("/")
    @ApiOperation(value = "View a list of available authors", response = Iterable.class)
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "Successfully retrieved list"),
            @ApiResponse(code = 401, message = "You are not authorized to view the resource"),
            @ApiResponse(code = 403, message = "Accessing the resource you were trying to reach is forbidden"),
            @ApiResponse(code = 404, message = "The resource you were trying to reach is not found")
    }
    )
    public List<T> findAll() {
        return (List<T>) getRepository().findAll();
    }

    @PostMapping
    public T save(T entity) {
        return getRepository().save(entity);
    }
    @PutMapping
    public T put(T entity) {
        return getRepository().save(entity);
    }
    @DeleteMapping
    public T delete(T entity) {
        return getRepository().save(entity);
    }
}
-----------------------------------------------------------------------------
package com.example.DemoGraphQL.controller;

import io.swagger.annotations.Api;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.example.DemoGraphQL.model.Book;
import com.example.DemoGraphQL.repository.BaseRepository;

@RestController
@Api(value="Authors API", description="Operations pertaining to authors")
@RequestMapping("/api")
public class GenericBookController extends Base<Book> {

    @Autowired 
    BaseRepository<Book> repository;

    public BaseRepository<Book> getRepository() {
        return repository;
    }
}
-----------------------------------------------------------------------------
-----------------------------------------------------------------------------
-----------------------------------------------------------------------------

package com.example.DemoGraphQL.services;

import com.example.DemoGraphQL.repository.BaseRepository;

import org.springframework.stereotype.Service;
import java.util.List;

@Service
public abstract class BaseService<T> {
    abstract BaseRepository<T> getRepository();
   
    public T findById(Long id) {
        return (T) getRepository().findById(id);
    }

   
    public List<T> findAll() {
        return (List<T>) getRepository().findAll();
    }

    public T save(T entity) {
        return getRepository().save(entity);
    }
   
    public T put(T entity) {
        return getRepository().save(entity);
    }
   
    public T delete(T entity) {
        return getRepository().save(entity);
    }
}
-----------------------------------------------------------------------------

package com.example.DemoGraphQL.services;

import com.example.DemoGraphQL.model.Book;
import com.example.DemoGraphQL.repository.BaseRepository;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Service
public class BooksService extends BaseService<Book> {

    @Autowired 
    BaseRepository<Book> repository;

    public BaseRepository<Book> getRepository() {
        return repository;
    }
    
}
-----------------------------------------------------------------------------

package com.example.DemoGraphQL.controller;

import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;


import java.util.List;

import com.example.DemoGraphQL.services.BaseService;


public abstract class Base<T> {

    abstract BaseService<T> getService();

    @GetMapping("/{id}")
    @ApiOperation(value = "View the item", response = Iterable.class)
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "Successfully retrieved item"),
            @ApiResponse(code = 401, message = "You are not authorized to view the resource"),
            @ApiResponse(code = 403, message = "Accessing the resource you were trying to reach is forbidden"),
            @ApiResponse(code = 404, message = "The resource you were trying to reach is not found")
    }
    )
    public T findById(Long id) {
        return (T) getService().findById(id);
    }

    @GetMapping("/")
    @ApiOperation(value = "View a list of available authors", response = Iterable.class)
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "Successfully retrieved list"),
            @ApiResponse(code = 401, message = "You are not authorized to view the resource"),
            @ApiResponse(code = 403, message = "Accessing the resource you were trying to reach is forbidden"),
            @ApiResponse(code = 404, message = "The resource you were trying to reach is not found")
    }
    )
    public List<T> findAll() {
        return (List<T>) getService().findAll();
    }

    @PostMapping
    public T save(T entity) {
        return getService().save(entity);
    }
    @PutMapping
    public T put(T entity) {
        return getService().save(entity);
    }
    @DeleteMapping
    public T delete(T entity) {
        return getService().save(entity);
    }
}

-----------------------------------------------------------------------------
package com.example.DemoGraphQL.controller;

import io.swagger.annotations.Api;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.example.DemoGraphQL.model.Book;
import com.example.DemoGraphQL.services.BaseService;

@RestController
@Api(value="Authors API", description="Operations pertaining to authors")
@RequestMapping("/api")
public class GenericBookController extends Base<Book> {

    @Autowired 
    BaseService<Book> service;

    public BaseService<Book> getService() {
        return service;
    }
}

https://stackoverflow.com/questions/6800856/is-it-possible-to-get-the-id-to-be-inserted-in-the-database-before-insert
https://stackoverflow.com/questions/57471268/selecting-nextval-from-h2-database-and-db2?rq=1
https://stackoverflow.com/questions/55006231/query-to-get-nextval-from-sequence-with-spring-jpa

https://howtodoinjava.com/spring-boot2/testing/spring-boot-2-junit-5/
