https://github.com/key-consulting/publish-over-ssh-plugin/blob/master/src/test/java/jenkins/plugins/publish_over_ssh/jenkins/IntegrationTest.java

xml.wsd
@startuml
title Bazaarvoice XML Objects

skinparam ParticipantPadding 50
skinparam BoxPadding 30

map UploadFeedXML {
    productid => office (bazaarvoiceid)
    description => office (teaser)
}

map DownloadFeedXML {
    extractDateTime => 
    productid => office (bazaarvoiceid)
    reviewid => review (bazaarvoicereviewid)
    rating => review (rating)
}


@enduml

db.wsd
@startuml
title Bazaarvoice Database Entity Dependencies

skinparam ParticipantPadding 50
skinparam BoxPadding 30

map "office ** (OfficeDB) **" as CC {
    ... => 
    bazaarvoiceid => uuid
    optoutbazaarvoice => boolean
}

map "review ** (SupportDB) **" as CA {
    bazaarvoiceid => uuid
    bazaarvoicereviewid => string
    sendStatus => timestamp
    rating => integer
}

map "settings ** (ProspectiveDB) **" as CB {
    officeid => string
    mailaddress => string
}

@enduml

upload.wsd
@startuml
title Bazaarvoice Upload Office Catalog as Feed - CronJob

skinparam ParticipantPadding 50
skinparam BoxPadding 30

box "Paas" 
participant cronjob
participant supportBackend
database supportDB
database officeDB
end box
participant sftp

cronjob -> supportBackend: start at 11:00 pm
supportBackend -> supportDB: insert entry into batchrun table start timestamp
supportBackend -> officeDB: Request Office Data 
officeDB -> supportBackend: Response Office Data 
supportBackend -> sftp: convert dto to xml and upload data
sftp -> supportBackend: ok
supportBackend -> supportDB: update batchrun table with end timestamp
supportBackend -> cronjob: job done!

@enduml

notification.wsd
@startuml
!pragma teoz true
title Bazaarvoice Notification Mail - CronJob

skinparam ParticipantPadding 50
skinparam BoxPadding 30

box "Paas" 
participant cronjob
participant supportBackend
database supportDB
database officeDB
database prospectiveDB
participant notificationHelper
end box
Actor Kanzlei

{start} cronjob -> supportBackend: start daily at 5:20 am
supportBackend -> supportDB: insert entry into batchrun table start timestamp
supportBackend -> supportDB: get only reviews with ModeratorStatus "APPROVED" and SendStatus NULL
supportDB -> supportBackend: reviews found
supportBackend -> officeDB: get officeid by bazaarvoiceId
officeDB -> supportBackend: officeid 
supportBackend -> prospectiveDB: get settings with mailadress by officeid
prospectiveDB -> supportBackend: settings (mailadress)
supportBackend -> notificationHelper: send NotificationDTO
notificationHelper -> Kanzlei: send Mail
notificationHelper -> supportBackend: Notification Done!
supportBackend -> supportDB: update reviews SendStatus with timestamp
supportDB -> supportBackend: reviews updated!
supportBackend -> supportDB: update batchrun table with end timestamp
{end} supportBackend -> cronjob: job done!

{start} <-> {end}: runtime

@enduml

download.wsd
@startuml
title Bazaarvoice Download Review Feeds - CronJob

skinparam ParticipantPadding 50
skinparam BoxPadding 30

box "Paas" 
participant cronjob
participant supportBackend
database supportDB
end box
participant sftp


cronjob -> supportBackend: start daily at 4:20 am
supportBackend -> supportDB: insert entry into batchrun table start timestamp
supportBackend -> sftp: Request incremental Review XML's with Bazaarvoiceids
sftp -> supportBackend: Response incremental Review XML's with Bazaarvoiceids
supportBackend -> supportDB: Insert review into DB
supportDB -> supportBackend: review saved!
supportBackend -> supportDB: update batchrun table with end timestamp
supportBackend -> cronjob: job done!

@enduml
