pipeline {
  agent any
  options { timestamps () }
  tools {nodejs "node"}
    
  stages {
        
    stage('Install dependencies') {
      steps {
        // Clean before build
        cleanWs()

        sh 'ls -a && node -v && npm -v'
        
        nodeOptimizedInstall()
        // sh 'npm install'
      }
    }
     
    stage('Test') {
      steps {
         sh 'npm test'
      }
    }      
  }
}

void cleanWs() {
  sh 'rm -rf node_modules/'
  sh 'rm -rf *.tgz'
  sh 'rm -rf *.md5sum'
}

String nodeOptimizedInstalldeclareFiles() {
   return '''
    APP_NAME=angular_jenkins_test
    CACHE_FOLDER=${HOME}/.cache/md5_${APP_NAME}
    echo "EXECUTOR_NUMBER: ${EXECUTOR_NUMBER}"
    MD5_FILE_NAME=package-json_${EXECUTOR_NUMBER}.md5sum

    PKG_SUM=$(md5sum package.json|cut -d\\  -f 1)
    CACHED_FILE=${PKG_SUM}.tgz
    '''
}

String nodeOptimizedInstallFailedMD5Sum() {
   return '''
    nodeOptimizedInstallFailedMD5Sum()
    {
      echo "md5sum is not ok"
      rm -rf ${CACHE_FOLDER}/${MD5_FILE_NAME} && rm -rf ${CACHE_FOLDER}/${CACHED_FILE} && rm -rf ${MD5_FILE_NAME} && rm -rf ${CACHED_FILE} 
      npm i
      tar zcf ${CACHED_FILE} node_modules
      echo "create new md5sum backup"
      md5sum package.json
      md5sum package.json > ${MD5_FILE_NAME}
      cp ${MD5_FILE_NAME} ${CACHE_FOLDER}
      cp ${CACHED_FILE} ${CACHE_FOLDER}
    }
   '''
}

String nodeOptimizedInstallCacheFolder() {
  return '''
    if [ -d ${CACHE_FOLDER} ];then
      echo "${CACHE_FOLDER} exists!"
    else
      if [ -f ${CACHE_FOLDER} ];then
        echo "${CACHE_FOLDER} is not a directory but a file so delete it!"
        rm -rf ${CACHE_FOLDER}
      fi
      echo "create directory ${CACHE_FOLDER}!"
      mkdir -p ${CACHE_FOLDER}
    fi
    '''
}

void nodeOptimizedInstall() {
  sh '''#!/bin/bash''' + 
  nodeOptimizedInstalldeclareFiles() + 
  nodeOptimizedInstallFailedMD5Sum() + 
  nodeOptimizedInstallCacheFolder() +
  '''
    if [ -f ${CACHE_FOLDER}/${MD5_FILE_NAME} ];then
      cp ${CACHE_FOLDER}/${MD5_FILE_NAME} ${MD5_FILE_NAME}
      md5sum package.json
      cat ${MD5_FILE_NAME}
      if md5sum -c ${MD5_FILE_NAME};then
        echo "md5sum is ok!"
        if [ -f ${CACHE_FOLDER}/${CACHED_FILE} ];then
          cp ${CACHE_FOLDER}/${CACHED_FILE} ${CACHED_FILE}
          echo "cachefile exists extract node_modules folder now...!"
          tar zxf ${CACHED_FILE}
        else
          echo "cachefile not exists!"
          npm i
          tar zcf ${CACHED_FILE} node_modules
        fi
      else
        nodeOptimizedInstallFailedMD5Sum
      fi
    else
      nodeOptimizedInstallFailedMD5Sum
    fi

    ls -a ${CACHE_FOLDER}
    ls ${CACHE_FOLDER}
    '''
}

ng g scuri:spec --name src/app/components/c1/c1.component.ts --update
https://github.com/gparlakov/scuri
https://indepth.dev/posts/1240/create-your-angular-unit-test-spies-automagically
https://blog.3sharecorp.com/unit-testing-js-and-ts-in-aem-with-jest

https://stackoverflow.com/questions/39038791/inheritance-and-dependency-injection

https://stackoverflow.com/questions/60151224/unable-to-change-the-configuration-from-jest-to-karma-ngentest
https://www.amadousall.com/how-to-set-up-angular-unit-testing-with-jest/
https://stackoverflow.com/questions/61422160/testing-angular-component-using-jest
https://stackoverflow.com/questions/62558674/angular-jest-testing-a-component-that-opens-a-matdialog-open-is-not-a-function

https://medium.com/@kandisa.ganesh/resiliency-patterns-with-spring-boot-and-resilience4j-a28734bda17f
https://stackoverflow.com/questions/65909665/circuitbreaker-not-loading-defaults-from-yaml-file
https://quabr.com/65536176/get-instance-of-circuit-breaker-from-configuration-file
https://github.com/thombergs/code-examples/blob/master/resilience4j/circuitbreaker/src/main/java/io/reflectoring/resilience4j/circuitbreaker/Examples.java
https://reflectoring.io/circuitbreaker-with-resilience4j/

https://stackoverflow.com/questions/65331080/spring-data-rest-change-operation-id-in-openapi-specification


https://stackoverflow.com/questions/53748432/spring-generic-repository-autowiring-failure
https://medium.com/codestorm/custom-json-response-with-responseentity-in-spring-boot-b09e87ab1f0a

package com.example.DemoGraphQL.repository;

import org.springframework.data.repository.CrudRepository;
import org.springframework.data.repository.NoRepositoryBean;

@NoRepositoryBean
public interface BaseRepository<T> extends CrudRepository<T, Long> {
}
-----------------------------------------------------------------------------
package com.example.DemoGraphQL.repository;

import com.example.DemoGraphQL.model.Book;

public interface GenericBookRepository extends BaseRepository<Book> {
}
-----------------------------------------------------------------------------
package com.example.DemoGraphQL.controller;

import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;


import java.util.List;

import com.example.DemoGraphQL.repository.BaseRepository;


public abstract class Base<T> {

    abstract BaseRepository<T> getRepository();

    @GetMapping("/{id}")
    @ApiOperation(value = "View the item", response = Iterable.class)
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "Successfully retrieved item"),
            @ApiResponse(code = 401, message = "You are not authorized to view the resource"),
            @ApiResponse(code = 403, message = "Accessing the resource you were trying to reach is forbidden"),
            @ApiResponse(code = 404, message = "The resource you were trying to reach is not found")
    }
    )
    public T findById(Long id) {
        return (T) getRepository().findById(id);
    }

    @GetMapping("/")
    @ApiOperation(value = "View a list of available authors", response = Iterable.class)
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "Successfully retrieved list"),
            @ApiResponse(code = 401, message = "You are not authorized to view the resource"),
            @ApiResponse(code = 403, message = "Accessing the resource you were trying to reach is forbidden"),
            @ApiResponse(code = 404, message = "The resource you were trying to reach is not found")
    }
    )
    public List<T> findAll() {
        return (List<T>) getRepository().findAll();
    }

    @PostMapping
    public T save(T entity) {
        return getRepository().save(entity);
    }
    @PutMapping
    public T put(T entity) {
        return getRepository().save(entity);
    }
    @DeleteMapping
    public T delete(T entity) {
        return getRepository().save(entity);
    }
}
-----------------------------------------------------------------------------
package com.example.DemoGraphQL.controller;

import io.swagger.annotations.Api;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.example.DemoGraphQL.model.Book;
import com.example.DemoGraphQL.repository.BaseRepository;

@RestController
@Api(value="Authors API", description="Operations pertaining to authors")
@RequestMapping("/api")
public class GenericBookController extends Base<Book> {

    @Autowired 
    BaseRepository<Book> repository;

    public BaseRepository<Book> getRepository() {
        return repository;
    }
}
-----------------------------------------------------------------------------
-----------------------------------------------------------------------------
-----------------------------------------------------------------------------

package com.example.DemoGraphQL.services;

import com.example.DemoGraphQL.repository.BaseRepository;

import org.springframework.stereotype.Service;
import java.util.List;

@Service
public abstract class BaseService<T> {
    abstract BaseRepository<T> getRepository();
   
    public T findById(Long id) {
        return (T) getRepository().findById(id);
    }

   
    public List<T> findAll() {
        return (List<T>) getRepository().findAll();
    }

    public T save(T entity) {
        return getRepository().save(entity);
    }
   
    public T put(T entity) {
        return getRepository().save(entity);
    }
   
    public T delete(T entity) {
        return getRepository().save(entity);
    }
}
-----------------------------------------------------------------------------

package com.example.DemoGraphQL.services;

import com.example.DemoGraphQL.model.Book;
import com.example.DemoGraphQL.repository.BaseRepository;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Service
public class BooksService extends BaseService<Book> {

    @Autowired 
    BaseRepository<Book> repository;

    public BaseRepository<Book> getRepository() {
        return repository;
    }
    
}
-----------------------------------------------------------------------------

package com.example.DemoGraphQL.controller;

import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;


import java.util.List;

import com.example.DemoGraphQL.services.BaseService;


public abstract class Base<T> {

    abstract BaseService<T> getService();

    @GetMapping("/{id}")
    @ApiOperation(value = "View the item", response = Iterable.class)
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "Successfully retrieved item"),
            @ApiResponse(code = 401, message = "You are not authorized to view the resource"),
            @ApiResponse(code = 403, message = "Accessing the resource you were trying to reach is forbidden"),
            @ApiResponse(code = 404, message = "The resource you were trying to reach is not found")
    }
    )
    public T findById(Long id) {
        return (T) getService().findById(id);
    }

    @GetMapping("/")
    @ApiOperation(value = "View a list of available authors", response = Iterable.class)
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "Successfully retrieved list"),
            @ApiResponse(code = 401, message = "You are not authorized to view the resource"),
            @ApiResponse(code = 403, message = "Accessing the resource you were trying to reach is forbidden"),
            @ApiResponse(code = 404, message = "The resource you were trying to reach is not found")
    }
    )
    public List<T> findAll() {
        return (List<T>) getService().findAll();
    }

    @PostMapping
    public T save(T entity) {
        return getService().save(entity);
    }
    @PutMapping
    public T put(T entity) {
        return getService().save(entity);
    }
    @DeleteMapping
    public T delete(T entity) {
        return getService().save(entity);
    }
}

-----------------------------------------------------------------------------
package com.example.DemoGraphQL.controller;

import io.swagger.annotations.Api;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.example.DemoGraphQL.model.Book;
import com.example.DemoGraphQL.services.BaseService;

@RestController
@Api(value="Authors API", description="Operations pertaining to authors")
@RequestMapping("/api")
public class GenericBookController extends Base<Book> {

    @Autowired 
    BaseService<Book> service;

    public BaseService<Book> getService() {
        return service;
    }
}

https://stackoverflow.com/questions/6800856/is-it-possible-to-get-the-id-to-be-inserted-in-the-database-before-insert
https://stackoverflow.com/questions/57471268/selecting-nextval-from-h2-database-and-db2?rq=1
https://stackoverflow.com/questions/55006231/query-to-get-nextval-from-sequence-with-spring-jpa

https://howtodoinjava.com/spring-boot2/testing/spring-boot-2-junit-5/
