package com.example.demo;

import java.io.File;
import java.io.FileInputStream;
import java.util.HashMap;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;
import com.jcraft.jsch.Channel;
import com.jcraft.jsch.ChannelSftp;
import com.jcraft.jsch.JSch;
import com.jcraft.jsch.Session;
import com.jcraft.jsch.SftpException;
import com.jcraft.jsch.JSchException;
import com.jcraft.jsch.SftpATTRS;
import com.jcraft.jsch.ChannelSftp.LsEntry;
import java.util.Vector;

@RestController
public class SftpSvc {
    
    Session session = null;
    Channel channel = null;
    ChannelSftp channelSftp = null;
    private static final int SESSION_TIMEOUT = 10000;
    private static final int CHANNEL_TIMEOUT = 5000;

    @GetMapping("/sftp")
    public HashMap<String, String> sayHello() {
        var map = new HashMap<String, String>();

        send("C:\\Users\\Administrator\\Downloads\\gadget.ts");
        map.put("greeting", "Hello");
        map.put("planet", "Mars");

        return map;
    }

    private void send(String fileName) {

        String SFTPHOST = "";
        int SFTPPORT = 2222;
        String SFTPUSER = "";
        String SFTPPASS = "";
        String SFTPWORKINGDIR = "/home/upload";
        //String privateKey = "E:\\DownloadFTP\\sss.ppk";

        System.out.println("preparing the host information for sftp.");

        try {
            JSch jsch = new JSch();
            //jsch.addIdentity(privateKey);
            session = jsch.getSession(SFTPUSER, SFTPHOST, SFTPPORT);
            //jsch.setKnownHosts("/home/fdsfdsfds/.ssh/known_hosts");
            session.setPassword(SFTPPASS);
            java.util.Properties config = new java.util.Properties();
            config.put("StrictHostKeyChecking", "no");
            config.put("PreferredAuthentications", "password");
            session.setConfig(config);
            // 10 seconds session timeout
            session.connect(SESSION_TIMEOUT);
            System.out.println("Host connected.");

            channel = session.openChannel("sftp");
            // 5 seconds timeout
            channel.connect(CHANNEL_TIMEOUT);
            System.out.println("sftp channel opened and connected.");

            channelSftp = (ChannelSftp) channel;
            if(!SFTPWORKINGDIR.isEmpty()) {
                channelSftp.cd(SFTPWORKINGDIR);
            }
            Vector filelist = channelSftp.ls(SFTPWORKINGDIR);
            for(int i=0; i<filelist.size();i++){
                LsEntry entry = (LsEntry) filelist.get(i);
                System.out.println(entry.getFilename());
            }
            if(accessAllowed(SFTPWORKINGDIR)) {
                System.out.println("accessAllowed.");    
            }
            File f = new File(fileName);
            channelSftp.put(new FileInputStream(f), f.getName());
            System.out.println("File transfered successfully to host.");
        } catch (Exception ex) {
            System.out.println("Exception found while tranfer the response.");
        } finally {
            channelSftp.exit();
            System.out.println("sftp Channel exited.");
            channel.disconnect();
            System.out.println("Channel disconnected.");
            session.disconnect();
            System.out.println("Host Session disconnected.");
        }
    }

    private boolean accessAllowed(String path) 
    throws SftpException, JSchException {

    boolean result = false;

    SftpATTRS attrs = channelSftp.lstat(path);

    result =
      attrs != null &&
      ((attrs.getPermissions() & 00200) != 0) &&
       attrs.getUId() != 0;

    return result;
  }
}
